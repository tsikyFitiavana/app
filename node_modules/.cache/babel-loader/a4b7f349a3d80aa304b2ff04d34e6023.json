{"ast":null,"code":"var _jsxFileName = \"/home/bruno/mon-aplie/app/src/forms/SyncValidationForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport Dropzone from 'react-dropzone';\nimport { FormGroup, FormControl, ControlLabel, Button, Panel, Grid, Row, Col } from 'react-bootstrap';\nvar FILE_FIELD_NAME = 'picture';\n\nvar renderDropzoneInput = function renderDropzoneInput(field) {\n  var files = field.input.value;\n  var dropzoneRef;\n  return React.createElement(\"div\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Dropzone, {\n    style: {\n      width: '200px',\n      height: '200px',\n      borderWidth: '2px',\n      borderColor: 'rgb(102, 102, 102)',\n      borderStyle: 'dashed',\n      borderRadius: '5px',\n      padding: '20px'\n    },\n    name: field.name,\n    onDrop: function onDrop(filesToUpload, e) {\n      return field.input.onChange(filesToUpload);\n    },\n    ref: function ref(node) {\n      dropzoneRef = node;\n    },\n    maxSize: 5242880,\n    multiple: false,\n    accept: 'image/*',\n    className: \"drop-zone\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, function (_ref) {\n    var isDragActive = _ref.isDragActive,\n        isDragReject = _ref.isDragReject,\n        acceptedFiles = _ref.acceptedFiles,\n        rejectedFiles = _ref.rejectedFiles;\n\n    if (isDragActive) {\n      return 'This file is authorized';\n    }\n\n    if (isDragReject) {\n      return 'This file is not authorized';\n    }\n\n    return acceptedFiles.length || rejectedFiles.length ? \"Accepted \".concat(acceptedFiles.length, \", rejected \").concat(rejectedFiles.length, \" files\") : 'Try dropping some files.';\n  }), field.meta.touched && field.meta.error && React.createElement(\"span\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, field.meta.error), files && Array.isArray(files) && React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, files.map(function (file, i) {\n    return React.createElement(\"li\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      key: i,\n      src: file.preview,\n      alt: \"preview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, file.name));\n  }))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"button\",\n    style: {\n      margin: '5px'\n    },\n    onClick: function onClick() {\n      dropzoneRef.open();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Add An Image\"))));\n};\n\nvar validate = function validate(values) {\n  var errors = {};\n\n  if (!values.name) {\n    errors.name = 'Required';\n  } else if (values.name.length > 200) {\n    errors.name = 'Must be 200 characters or less';\n  }\n\n  if (!values.description) {\n    errors.description = 'Required';\n  } else if (values.description.length > 200) {\n    errors.description = 'Must be 200 characters or less';\n  }\n\n  if (!values.url) {\n    errors.url = 'Required';\n  } else if (values.url.length > 150) {\n    errors.url = 'Must be 150 characters or less';\n  }\n\n  if (!values.about) {\n    errors.about = 'Required';\n  } else if (values.about.length > 500) {\n    errors.about = 'Must be 500 characters or less';\n  }\n\n  if (!values.picture) {\n    errors.picture = 'Required';\n  }\n\n  return errors;\n};\n\nvar renderField = function renderField(_ref2) {\n  var input = _ref2.input,\n      label = _ref2.label,\n      type = _ref2.type,\n      _ref2$meta = _ref2.meta,\n      touched = _ref2$meta.touched,\n      error = _ref2$meta.error,\n      warning = _ref2$meta.warning;\n  return React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, label), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(FormControl, Object.assign({}, input, {\n    placeholder: label,\n    type: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })), touched && (error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, error) || warning && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, warning))));\n};\n\nvar renderTextArea = function renderTextArea(_ref3) {\n  var input = _ref3.input,\n      _ref3$meta = _ref3.meta,\n      touched = _ref3$meta.touched,\n      error = _ref3$meta.error,\n      warning = _ref3$meta.warning;\n  return React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(ControlLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Content\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(FormControl, Object.assign({\n    componentClass: \"textarea\",\n    placeholder: \"write about the project\"\n  }, input, {\n    rows: \"10\",\n    cols: \"40\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })), touched && (error && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, error) || warning && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, warning))));\n};\n\nvar SyncValidationForm = function SyncValidationForm(props) {\n  var handleSubmit = props.handleSubmit,\n      pristine = props.pristine,\n      reset = props.reset,\n      submitting = props.submitting;\n  return React.createElement(Grid, {\n    style: {\n      margin: '20px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Row, {\n    className: \"text-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(Panel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"name\",\n    type: \"text\",\n    component: renderField,\n    label: \"Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: \"description\",\n    type: \"text\",\n    component: renderField,\n    label: \"Description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: \"url\",\n    type: \"text\",\n    component: renderField,\n    label: \"Url\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: \"about\",\n    type: \"text\",\n    component: renderTextArea,\n    label: \"About\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: FILE_FIELD_NAME,\n    component: renderDropzoneInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(Col, {\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Button, {\n    bsStyle: \"primary\",\n    type: \"submit\",\n    disabled: submitting,\n    style: {\n      margin: '5px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"Submit\"))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(Col, {\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(Button, {\n    bsStyle: \"danger\",\n    type: \"button\",\n    disabled: pristine || submitting,\n    onClick: reset,\n    style: {\n      margin: '5px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Clear Values\"))))))));\n};\n\nexport default reduxForm({\n  form: 'syncValidation',\n  // a unique identifier for this form\n  validate: validate // <--- validation function given to redux-form\n\n})(SyncValidationForm);","map":{"version":3,"sources":["/home/bruno/mon-aplie/app/src/forms/SyncValidationForm.js"],"names":["React","Field","reduxForm","Dropzone","FormGroup","FormControl","ControlLabel","Button","Panel","Grid","Row","Col","FILE_FIELD_NAME","renderDropzoneInput","field","files","input","value","dropzoneRef","width","height","borderWidth","borderColor","borderStyle","borderRadius","padding","name","filesToUpload","e","onChange","node","isDragActive","isDragReject","acceptedFiles","rejectedFiles","length","meta","touched","error","Array","isArray","map","file","i","preview","margin","open","validate","values","errors","description","url","about","picture","renderField","label","type","warning","renderTextArea","SyncValidationForm","props","handleSubmit","pristine","reset","submitting","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport Dropzone from 'react-dropzone';\nimport {\n  FormGroup,\n  FormControl,\n  ControlLabel,\n  Button,\n  Panel,\n  Grid,\n  Row,\n  Col,\n} from 'react-bootstrap';\n\nconst FILE_FIELD_NAME = 'picture';\n\nconst renderDropzoneInput = (field) => {\n  const files = field.input.value;\n  let dropzoneRef;\n  return (\n      <div className=\"text-center\">\n        <Grid>\n          <Row>\n        <Dropzone\n            style={{\n              width: '200px',\n              height: '200px',\n              borderWidth: '2px',\n              borderColor: 'rgb(102, 102, 102)',\n              borderStyle: 'dashed',\n              borderRadius: '5px',\n              padding: '20px',\n            }}\n            name={field.name}\n            onDrop={(filesToUpload, e) => field.input.onChange(filesToUpload)}\n            ref={(node) => { dropzoneRef = node; }}\n            maxSize={5242880}\n            multiple={false}\n            accept={'image/*'}\n            className=\"drop-zone\"\n        >\n          {({isDragActive, isDragReject, acceptedFiles, rejectedFiles}) => {\n            if (isDragActive) {\n              return 'This file is authorized';\n            }\n            if (isDragReject) {\n              return 'This file is not authorized';\n            }\n            return acceptedFiles.length || rejectedFiles.length\n                ? `Accepted ${acceptedFiles.length}, rejected ${rejectedFiles.length} files`\n                : 'Try dropping some files.';\n          }}\n        </Dropzone>\n        {field.meta.touched &&\n        field.meta.error &&\n        <span className=\"error\">{field.meta.error}</span>}\n        {\n          files && Array.isArray(files) && (\n              <ul>\n                {files.map((file, i) =>\n                    <li key={i}>\n                      <img key={i}\n                           src={file.preview} alt=\"preview\"/>\n                      <p>{file.name}</p>\n                    </li>,\n                )}\n              </ul>\n          )}\n          </Row>\n          <Row>\n            <Button type=\"button\" style={{margin: '5px'}}\n                    onClick={() => { dropzoneRef.open(); }}>Add An\n              Image\n            </Button>\n          </Row>\n        </Grid>\n      </div>\n  );\n};\nconst validate = values => {\n  const errors = {};\n  if (!values.name) {\n    errors.name = 'Required';\n  } else if (values.name.length > 200) {\n    errors.name = 'Must be 200 characters or less';\n  }\n  if (!values.description) {\n    errors.description = 'Required';\n  } else if (values.description.length > 200) {\n    errors.description = 'Must be 200 characters or less';\n  }\n  \n  if (!values.url) {\n    errors.url = 'Required';\n  } else if (values.url.length > 150) {\n    errors.url = 'Must be 150 characters or less';\n  }\n  if (!values.about) {\n    errors.about = 'Required';\n  } else if (values.about.length > 500) {\n    errors.about = 'Must be 500 characters or less';\n  }\n  if (!values.picture) {\n    errors.picture = 'Required';\n  }\n  \n  return errors;\n};\n\nconst renderField = ({input, label, type, meta: {touched, error, warning}}) => (\n    <FormGroup>\n      <ControlLabel>{label}</ControlLabel>\n      <div>\n        <FormControl  {...input} placeholder={label} type={type}/>\n        {touched && ((error && <span>{error}</span>) ||\n            (warning && <span>{warning}</span>))}\n      </div>\n    </FormGroup>\n);\nconst renderTextArea = ({input, meta: {touched, error, warning}}) => (\n    <FormGroup>\n      <ControlLabel>Content</ControlLabel>\n      <div>\n        <FormControl componentClass=\"textarea\"\n                     placeholder=\"write about the project\" {...input} rows=\"10\"\n                     cols=\"40\"/>\n        {touched && ((error && <span>{error}</span>) ||\n            (warning && <span>{warning}</span>))}\n      </div>\n    </FormGroup>\n);\n\nconst SyncValidationForm = (props) => {\n  const {handleSubmit, pristine, reset, submitting} = props;\n  return (\n      <Grid style={{margin: '20px'}}>\n        <Row className=\"text-left\">\n          <Panel>\n            <form onSubmit={handleSubmit}>\n              <Field name=\"name\" type=\"text\" component={renderField}\n                     label=\"Name\"/>\n              <Field name=\"description\" type=\"text\" component={renderField}\n                     label=\"Description\"/>\n              <Field name=\"url\" type=\"text\" component={renderField}\n                     label=\"Url\"/>\n              <Field name=\"about\" type=\"text\" component={renderTextArea}\n                     label=\"About\"/>\n              <Field\n                  name={FILE_FIELD_NAME}\n                  component={renderDropzoneInput}\n              />\n              \n              <Grid className=\"text-center\">\n                <Row>\n                  <Col sm={12} md={12}>\n                    <Button bsStyle=\"primary\" type=\"submit\"\n                            disabled={submitting} style={{margin: '5px'}}>Submit</Button>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col sm={12} md={12}>\n                    \n                    <Button bsStyle=\"danger\" type=\"button\"\n                            disabled={pristine || submitting}\n                            onClick={reset} style={{margin: '5px'}}>Clear\n                      Values\n                    </Button>\n                  </Col>\n                </Row>\n              </Grid>\n            </form>\n          </Panel>\n        </Row>\n      </Grid>\n  );\n};\n\nexport default reduxForm({\n  form: 'syncValidation',  // a unique identifier for this form\n  validate,                // <--- validation function given to redux-form\n})(SyncValidationForm);\n"]},"metadata":{},"sourceType":"module"}